syntax = "proto3";

package startwars;

option go_package = "github.com/ysugimoto/grpc-graphql-gateway/example/starwars/spec/starwars";

import "graphql/graphql.proto";

message Character {
  int64 id = 1;
  string name = 2;
  repeated Character friends = 3;
  repeated Episode appears_in = 4;
  string home_planet = 5;
  string primary_function = 6;
  Type type = 7;
}

enum Type {
  HUMAN = 0;
  DROID = 1;
}

enum Episode {
  _ = 0;
  NEWHOPE = 1;
  EMPIRE = 2;
  JEDI = 3;
}

message GetHeroRequest {
  // If omitted, returns the hero of the whope saga. If provided, returns the hero of that particular episode.
  Episode episode = 1;
}

message GetHumanRequest {
  // id of the human
  int64 id = 1 [(graphql.field) = {required: true}];
}

message GetDroidRequest {
  // id of the droid
  int64 id = 1 [(graphql.field) = {required: true}];
}

message ListEmptyRequest {
}

message ListHumansResponse {
  repeated Character humans = 1;
}

message ListDroidsResponse {
  repeated Character droids = 1;
}

service StartwarsService {
  option (graphql.service) = {
    host: "grpc:50051"
  };

  rpc GetHero(GetHeroRequest) returns (Character) {
    option (graphql.schema) = {
      type: QUERY
      name: "hero"
    };
  }

  rpc GetHuman(GetHumanRequest) returns (Character) {
    option (graphql.schema) = {
      type: QUERY
      name: "human"
    };
  }

  rpc GetDroid(GetDroidRequest) returns (Character) {
    option (graphql.schema) = {
      type: QUERY
      name: "droid"
    };
  }

  rpc ListHumans(ListEmptyRequest) returns (ListHumansResponse) {
    option (graphql.schema) = {
      type: QUERY
      name: "humans"
      response {
        pluck: "humans"
      }
    };
  }

  rpc ListDroids(ListEmptyRequest) returns (ListDroidsResponse) {
    option (graphql.schema) = {
      type: QUERY
      name: "droids"
      response {
        pluck: "droids"
      }
    };
  }

}
